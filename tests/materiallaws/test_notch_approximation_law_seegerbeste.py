# Copyright (c) 2019-2022 - for information on the respective copyright owner
# see the NOTICE file and/or the repository
# https://github.com/boschresearch/pylife
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

__author__ = "Benjamin Maier"
__maintainer__ = __author__

import pytest
import numpy as np
import pandas as pd

import pylife.strength.damage_parameter
import pylife.materiallaws.notch_approximation_law
from pylife.materiallaws.notch_approximation_law_seegerbeste import SeegerBeste


def test_seeger_beste_example_1():
    """ example under 2.7.1, p.74 of FKM nonlinear "Akademisches Beispiel" """
    
    E = 206e3    # [MPa] Young's modulus
    K = 1184     # [MPa]
    n = 0.187    # [-]
    K_p = 3.5    # [-] (de: Traglastformzahl) K_p = F_plastic / F_yield (3.1.1)
    
    L = pd.Series([100, -200, 100, -250, 200, 0, 200, -200])
    c = 1.4
    gamma_L = (250+6.6)/250
    L = c * gamma_L * L
    
    # initialize notch approximation law and damage parameter
    #notch_approximation_law = ExtendedNeuber(E, K, n, K_p)
    notch_approximation_law = SeegerBeste(E, K, n, K_p)
#    damage_parameter_type = pylife.strength.damage_parameter.P_RAM()
    
    maximum_absolute_load = max(abs(L))
#    print(maximum_absolute_load)
    
    # the FKM example seems to round here, real value is 359.24
    assert np.isclose(maximum_absolute_load, 359.3, rtol=1e-3)
    
    binned_notch_approximation_law = pylife.materiallaws.notch_approximation_law.Binned(notch_approximation_law, maximum_absolute_load)

    # some rows of PFAD are given in the FKM nonlinear example on p.76
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[0], \
        pd.Series([3.59, 0.0017e-2, 3.59]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[1], \
        pd.Series([7.18, 0.0035e-2, 7.18]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    # this row seems off in the FKM nonlinear example, error is as high as 5%
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[49], \
        #pd.Series([179.62, 8.73e-4, 172.93]), check_names=False, check_index=False, rtol=10e-2, atol=1e-5)
        pd.Series([179.62, 8.73e-4, 172.93]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[99], \
        pd.Series([359.24, 0.001859, 283.86]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    # matrix AST on page 162, chapter 3.4.1
    expected_matrix_AST = pd.DataFrame(
        index=pd.Index(np.arange(1, 200+1), name="class_index"),
#        index=pd.Index(np.arange(2, 200+1), name="class_index"),
        columns=["delta_load", "delta_strain", "delta_stress"],
        data=[
            [3.59, 1.7e-05, 3.592],
            [7.18, 3.5e-05, 7.185],
            [10.78, 5.2e-05, 10.777],
            [14.37, 7e-05, 14.37],
            [17.96, 8.7e-05, 17.961],
            [21.55, 0.000105, 21.554],
            [25.15, 0.000122, 25.147],
            [28.74, 0.00014, 28.739],
            [32.33, 0.000157, 32.331],
            [35.92, 0.000174, 35.924],
            [39.52, 0.000192, 39.517],
            [43.11, 0.000209, 43.108],
            [46.7, 0.000227, 46.701],
            [50.29, 0.000244, 50.294],
            [53.89, 0.000262, 53.885],
            [57.48, 0.000279, 57.477],
            [61.07, 0.000296, 61.07],
            [64.66, 0.000314, 64.661],
            [68.26, 0.000331, 68.253],
            [71.85, 0.000349, 71.845],
            [75.44, 0.000366, 75.436],
            [79.03, 0.000384, 79.028],
            [82.63, 0.000401, 82.619],
            [86.22, 0.000419, 86.209],
            [89.81, 0.000436, 89.8],
            [93.4, 0.000453, 93.39],
            [96.99, 0.000471, 96.979],
            [100.59, 0.000488, 100.568],
            [104.18, 0.000506, 104.157],
            [107.77, 0.000523, 107.745],
            [111.36, 0.000541, 111.332],
            [114.96, 0.000558, 114.918],
            [118.55, 0.000575, 118.504],
            [122.14, 0.000593, 122.088],
            [125.73, 0.00061, 125.672],
            [129.33, 0.000628, 129.254],
            [132.92, 0.000645, 132.835],
            [136.51, 0.000663, 136.415],
            [140.1, 0.00068, 139.993],
            [143.7, 0.000698, 143.57],
            [147.29, 0.000715, 147.144],
            [150.88, 0.000732, 150.717],
            [154.47, 0.00075, 154.287],
            [158.07, 0.000767, 157.856],
            [161.66, 0.000785, 161.421],
            [165.25, 0.000802, 164.985],
            [168.84, 0.00082, 168.545],
            [172.44, 0.000837, 172.102],
            [176.03, 0.000855, 175.656],
            [179.62, 0.000872, 179.207],
            [183.21, 0.000889, 182.754],
            [186.8, 0.000907, 186.297],
            [190.4, 0.000924, 189.835],
            [193.99, 0.000942, 193.37],
            [197.58, 0.000959, 196.899],
            [201.17, 0.000977, 200.424],
            [204.77, 0.000994, 203.943],
            [208.36, 0.001011, 207.457],
            [211.95, 0.001029, 210.965],
            [215.54, 0.001046, 214.467],
            [219.14, 0.001064, 217.963],
            [222.73, 0.001081, 221.452],
            [226.32, 0.001099, 224.934],
            [229.91, 0.001116, 228.408],
            [233.51, 0.001134, 231.875],
            [237.1, 0.001151, 235.334],
            [240.69, 0.001169, 238.785],
            [244.28, 0.001186, 242.227],
            [247.88, 0.001203, 245.66],
            [251.47, 0.001221, 249.083],
            [255.06, 0.001238, 252.497],
            [258.65, 0.001256, 255.901],
            [262.25, 0.001273, 259.295],
            [265.84, 0.001291, 262.678],
            [269.43, 0.001308, 266.049],
            [273.02, 0.001326, 269.41],
            [276.61, 0.001343, 272.758],
            [280.21, 0.001361, 276.095],
            [283.8, 0.001378, 279.419],
            [287.39, 0.001396, 282.731],
            [290.98, 0.001413, 286.03],
            [294.58, 0.001431, 289.315],
            [298.17, 0.001448, 292.587],
            [301.76, 0.001466, 295.844],
            [305.35, 0.001483, 299.088],
            [308.95, 0.001501, 302.317],
            [312.54, 0.001518, 305.531],
            [316.13, 0.001536, 308.73],
            [319.72, 0.001553, 311.914],
            [323.32, 0.001571, 315.082],
            [326.91, 0.001588, 318.235],
            [330.5, 0.001606, 321.372],
            [334.09, 0.001624, 324.492],
            [337.69, 0.001641, 327.596],
            [341.28, 0.001659, 330.683],
            [344.87, 0.001676, 333.754],
            [348.46, 0.001694, 336.808],
            [352.06, 0.001712, 339.844],
            [355.65, 0.001729, 342.864],
            [359.24, 0.001747, 345.866],
            [362.83, 0.001765, 348.85],
            [366.42, 0.001782, 351.817],
            [370.02, 0.0018, 354.766],
            [373.61, 0.001818, 357.698],
            [377.2, 0.001836, 360.612],
            [380.79, 0.001853, 363.507],
            [384.39, 0.001871, 366.385],
            [387.98, 0.001889, 369.245],
            [391.57, 0.001907, 372.087],
            [395.16, 0.001925, 374.91],
            [398.76, 0.001942, 377.716],
            [402.35, 0.00196, 380.504],
            [405.94, 0.001978, 383.274],
            [409.53, 0.001996, 386.025],
            [413.13, 0.002014, 388.759],
            [416.72, 0.002032, 391.475],
            [420.31, 0.00205, 394.173],
            [423.9, 0.002068, 396.853],
            [427.5, 0.002086, 399.515],
            [431.09, 0.002104, 402.16],
            [434.68, 0.002123, 404.787],
            [438.27, 0.002141, 407.397],
            [441.87, 0.002159, 409.989],
            [445.46, 0.002177, 412.564],
            [449.05, 0.002196, 415.121],
            [452.64, 0.002214, 417.662],
            [456.23, 0.002232, 420.185],
            [459.83, 0.002251, 422.691],
            [463.42, 0.002269, 425.181],
            [467.01, 0.002287, 427.654],
            [470.6, 0.002306, 430.111],
            [474.2, 0.002325, 432.551],
            [477.79, 0.002343, 434.974],
            [481.38, 0.002362, 437.382],
            [484.97, 0.00238, 439.774],
            [488.57, 0.002399, 442.149],
            [492.16, 0.002418, 444.509],
            [495.75, 0.002437, 446.854],
            [499.34, 0.002456, 449.183],
            [502.94, 0.002474, 451.496],
            [506.53, 0.002493, 453.795],
            [510.12, 0.002512, 456.078],
            [513.71, 0.002531, 458.347],
            [517.31, 0.00255, 460.601],
            [520.9, 0.00257, 462.84],
            [524.49, 0.002589, 465.065],
            [528.08, 0.002608, 467.276],
            [531.68, 0.002627, 469.473],
            [535.27, 0.002647, 471.655],
            [538.86, 0.002666, 473.824],
            [542.45, 0.002685, 475.98],
            [546.04, 0.002705, 478.121],
            [549.64, 0.002725, 480.25],
            [553.23, 0.002744, 482.365],
            [556.82, 0.002764, 484.467],
            [560.41, 0.002784, 486.556],
            [564.01, 0.002803, 488.633],
            [567.6, 0.002823, 490.697],
            [571.19, 0.002843, 492.748],
            [574.78, 0.002863, 494.787],
            [578.38, 0.002883, 496.814],
            [581.97, 0.002903, 498.829],
            [585.56, 0.002923, 500.832],
            [589.15, 0.002944, 502.823],
            [592.75, 0.002964, 504.802],
            [596.34, 0.002984, 506.77],
            [599.93, 0.003005, 508.727],
            [603.52, 0.003025, 510.672],
            [607.12, 0.003046, 512.607],
            [610.71, 0.003066, 514.53],
            [614.3, 0.003087, 516.443],
            [617.89, 0.003108, 518.344],
            [621.49, 0.003129, 520.236],
            [625.08, 0.003149, 522.117],
            [628.67, 0.00317, 523.987],
            [632.26, 0.003191, 525.847],
            [635.85, 0.003213, 527.698],
            [639.45, 0.003234, 529.538],
            [643.04, 0.003255, 531.368],
            [646.63, 0.003276, 533.189],
            [650.22, 0.003298, 535.0],
            [653.82, 0.003319, 536.801],
            [657.41, 0.003341, 538.594],
            [661.0, 0.003362, 540.377],
            [664.59, 0.003384, 542.15],
            [668.19, 0.003406, 543.915],
            [671.78, 0.003427, 545.671],
            [675.37, 0.003449, 547.418],
            [678.96, 0.003471, 549.156],
            [682.56, 0.003493, 550.885],
            [686.15, 0.003515, 552.606],
            [689.74, 0.003538, 554.319],
            [693.33, 0.00356, 556.023],
            [696.93, 0.003582, 557.719],
            [700.52, 0.003605, 559.407],
            [704.11, 0.003627, 561.086],
            [707.7, 0.00365, 562.758],
            [711.3, 0.003673, 564.422],
            [714.89, 0.003695, 566.078],
            [718.48, 0.003718, 567.727]
        ])
    
    pd.testing.assert_frame_equal(
        binned_notch_approximation_law._lut_secondary_branch, expected_matrix_AST, rtol=1e-3, atol=1e-5)

def test_seeger_beste_example_2():
    """ example under 2.7.2, p.78 of FKM nonlinear, "Welle mit V-Kerbe" """
    
    E = 206e3    # [MPa] Young's modulus
    K = 2650.5   # [MPa]
    n = 0.187    # [-]
    K_p = 3.5    # [-] (de: Traglastformzahl) K_p = F_plastic / F_yield (3.1.1)
    
    L = 1266.25 * pd.Series([0.3, -0.3, 0.5, -0.5, 0.6, -0.6, 0.3, -0.3, 0.7, -0.7, 0.2, -0.2, 0.6, -0.6, 0.8, -0.8, 0.8, -0.8])
    
    # initialize notch approximation law and damage parameter
    notch_approximation_law = SeegerBeste(E, K, n, K_p)
    
    maximum_absolute_load = max(abs(L))
    
    # the FKM example seems to round here, real value is 359.24
    assert np.isclose(maximum_absolute_load, 1013, rtol=1e-3)
    
    binned_notch_approximation_law = pylife.materiallaws.notch_approximation_law.Binned(
        notch_approximation_law, maximum_absolute_load)

    # some rows of PFAD are given in the FKM nonlinear example on p.79
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[0], \
        pd.Series([10.13, 0.0049e-2, 10.130]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[1], \
        pd.Series([20.26, 0.01e-2, 20.260]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    # this row seems off in the FKM nonlinear example, error is as high as 5%
    pd.testing.assert_series_equal(binned_notch_approximation_law._lut_primary_branch.iloc[99], \
        pd.Series([1013.00, 0.53e-2, 784.890]), check_names=False, check_index=False, rtol=1e-3, atol=1e-5)
    
    
    # matrix AST on page 171, chapter 3.4.2
    expected_matrix_AST = pd.DataFrame(
        index=pd.Index(np.arange(1, 200+1), name="class_index"),
        columns=["delta_load", "delta_strain", "delta_stress"],
        data=[
            [10.13, 4.9e-05, 10.13],
            [20.26, 9.8e-05, 20.26],
            [30.39, 0.000148, 30.39],
            [40.52, 0.000197, 40.52],
            [50.65, 0.000246, 50.65],
            [60.78, 0.000295, 60.78],
            [70.91, 0.000344, 70.91],
            [81.04, 0.000393, 81.04],
            [91.17, 0.000443, 91.169],
            [101.3, 0.000492, 101.3],
            [111.43, 0.000541, 111.429],
            [121.56, 0.00059, 121.56],
            [131.69, 0.000639, 131.69],
            [141.82, 0.000688, 141.814],
            [151.95, 0.000738, 151.948],
            [162.08, 0.000787, 162.077],
            [172.21, 0.000836, 172.206],
            [182.34, 0.000885, 182.334],
            [192.47, 0.000934, 192.462],
            [202.6, 0.000983, 202.589],
            [212.73, 0.001033, 212.716],
            [222.86, 0.001082, 222.842],
            [232.99, 0.001131, 232.967],
            [243.12, 0.00118, 243.092],
            [253.25, 0.001229, 253.215],
            [263.38, 0.001279, 263.336],
            [273.51, 0.001328, 273.457],
            [283.64, 0.001377, 283.575],
            [293.77, 0.001426, 293.692],
            [303.9, 0.001475, 303.806],
            [314.03, 0.001524, 313.918],
            [324.16, 0.001574, 324.028],
            [334.29, 0.001623, 334.134],
            [344.42, 0.001672, 344.237],
            [354.55, 0.001721, 354.336],
            [364.68, 0.00177, 364.432],
            [374.81, 0.001819, 374.523],
            [384.94, 0.001869, 384.609],
            [395.07, 0.001918, 394.69],
            [405.2, 0.001967, 404.765],
            [415.33, 0.002016, 414.834],
            [425.46, 0.002065, 424.896],
            [435.59, 0.002115, 434.951],
            [445.72, 0.002164, 444.998],
            [455.85, 0.002213, 455.037],
            [465.98, 0.002262, 465.067],
            [476.11, 0.002311, 475.087],
            [486.24, 0.00236, 485.096],
            [496.37, 0.00241, 495.095],
            [506.5, 0.002459, 505.082],
            [516.63, 0.002508, 515.056],
            [526.76, 0.002557, 525.016],
            [536.89, 0.002606, 534.963],
            [547.02, 0.002656, 544.894],
            [557.15, 0.002705, 554.81],
            [567.28, 0.002754, 564.709],
            [577.41, 0.002803, 574.59],
            [587.54, 0.002852, 584.452],
            [597.67, 0.002901, 594.295],
            [607.8, 0.002951, 604.118],
            [617.93, 0.003, 613.919],
            [628.06, 0.003049, 623.697],
            [638.19, 0.003098, 633.452],
            [648.32, 0.003148, 643.183],
            [658.45, 0.003197, 652.888],
            [668.58, 0.003246, 662.566],
            [678.71, 0.003295, 672.217],
            [688.84, 0.003344, 681.838],
            [698.97, 0.003394, 691.43],
            [709.1, 0.003443, 700.992],
            [719.23, 0.003492, 710.521],
            [729.36, 0.003541, 720.018],
            [739.49, 0.003591, 729.48],
            [749.62, 0.00364, 738.907],
            [759.75, 0.003689, 748.299],
            [769.88, 0.003739, 757.653],
            [780.01, 0.003788, 766.97],
            [790.14, 0.003837, 776.247],
            [800.27, 0.003887, 785.485],
            [810.4, 0.003936, 794.681],
            [820.53, 0.003985, 803.836],
            [830.66, 0.004035, 812.948],
            [840.79, 0.004084, 822.017],
            [850.92, 0.004134, 831.041],
            [861.05, 0.004183, 840.02],
            [871.18, 0.004233, 848.954],
            [881.31, 0.004282, 857.84],
            [891.44, 0.004332, 866.68],
            [901.57, 0.004381, 875.471],
            [911.7, 0.004431, 884.214],
            [921.83, 0.004481, 892.908],
            [931.96, 0.00453, 901.552],
            [942.09, 0.00458, 910.146],
            [952.22, 0.00463, 918.69],
            [962.35, 0.004679, 927.182],
            [972.48, 0.004729, 935.623],
            [982.61, 0.004779, 944.012],
            [992.74, 0.004829, 952.349],
            [1002.87, 0.004879, 960.634],
            [1013.0, 0.004929, 968.866],
            [1023.13, 0.004979, 977.046],
            [1033.26, 0.005029, 985.172],
            [1043.39, 0.00508, 993.245],
            [1053.52, 0.00513, 1001.266],
            [1063.65, 0.00518, 1009.232],
            [1073.78, 0.005231, 1017.146],
            [1083.91, 0.005281, 1025.007],
            [1094.04, 0.005332, 1032.814],
            [1104.17, 0.005382, 1040.568],
            [1114.3, 0.005433, 1048.269],
            [1124.43, 0.005484, 1055.918],
            [1134.56, 0.005535, 1063.513],
            [1144.69, 0.005586, 1071.056],
            [1154.82, 0.005637, 1078.547],
            [1164.95, 0.005688, 1085.985],
            [1175.08, 0.005739, 1093.372],
            [1185.21, 0.00579, 1100.707],
            [1195.34, 0.005842, 1107.99],
            [1205.47, 0.005893, 1115.223],
            [1215.6, 0.005945, 1122.405],
            [1225.73, 0.005996, 1129.536],
            [1235.86, 0.006048, 1136.618],
            [1245.99, 0.0061, 1143.649],
            [1256.12, 0.006152, 1150.632],
            [1266.25, 0.006204, 1157.565],
            [1276.38, 0.006257, 1164.45],
            [1286.51, 0.006309, 1171.287],
            [1296.64, 0.006362, 1178.076],
            [1306.77, 0.006414, 1184.818],
            [1316.9, 0.006467, 1191.513],
            [1327.03, 0.00652, 1198.162],
            [1337.16, 0.006573, 1204.765],
            [1347.29, 0.006626, 1211.322],
            [1357.42, 0.006679, 1217.834],
            [1367.55, 0.006733, 1224.302],
            [1377.68, 0.006786, 1230.725],
            [1387.81, 0.00684, 1237.105],
            [1397.94, 0.006894, 1243.442],
            [1408.07, 0.006948, 1249.735],
            [1418.2, 0.007002, 1255.987],
            [1428.33, 0.007057, 1262.197],
            [1438.46, 0.007111, 1268.365],
            [1448.59, 0.007166, 1274.493],
            [1458.72, 0.007221, 1280.58],
            [1468.85, 0.007276, 1286.627],
            [1478.98, 0.007331, 1292.634],
            [1489.11, 0.007386, 1298.603],
            [1499.24, 0.007441, 1304.533],
            [1509.37, 0.007497, 1310.425],
            [1519.5, 0.007553, 1316.279],
            [1529.63, 0.007609, 1322.096],
            [1539.76, 0.007665, 1327.876],
            [1549.89, 0.007721, 1333.62],
            [1560.02, 0.007778, 1339.328],
            [1570.15, 0.007835, 1345.0],
            [1580.28, 0.007892, 1350.638],
            [1590.41, 0.007949, 1356.241],
            [1600.54, 0.008006, 1361.809],
            [1610.67, 0.008063, 1367.344],
            [1620.8, 0.008121, 1372.846],
            [1630.93, 0.008179, 1378.314],
            [1641.06, 0.008237, 1383.751],
            [1651.19, 0.008295, 1389.154],
            [1661.32, 0.008354, 1394.527],
            [1671.45, 0.008412, 1399.868],
            [1681.58, 0.008471, 1405.178],
            [1691.71, 0.00853, 1410.457],
            [1701.84, 0.008589, 1415.706],
            [1711.97, 0.008649, 1420.926],
            [1722.1, 0.008709, 1426.116],
            [1732.23, 0.008768, 1431.276],
            [1742.36, 0.008829, 1436.409],
            [1752.49, 0.008889, 1441.512],
            [1762.62, 0.008949, 1446.588],
            [1772.75, 0.00901, 1451.636],
            [1782.88, 0.009071, 1456.657],
            [1793.01, 0.009132, 1461.651],
            [1803.14, 0.009194, 1466.619],
            [1813.27, 0.009255, 1471.559],
            [1823.4, 0.009317, 1476.474],
            [1833.53, 0.009379, 1481.364],
            [1843.66, 0.009442, 1486.228],
            [1853.79, 0.009504, 1491.067],
            [1863.92, 0.009567, 1495.881],
            [1874.05, 0.00963, 1500.671],
            [1884.18, 0.009693, 1505.436],
            [1894.31, 0.009757, 1510.178],
            [1904.44, 0.00982, 1514.897],
            [1914.57, 0.009884, 1519.592],
            [1924.7, 0.009948, 1524.264],
            [1934.83, 0.010013, 1528.913],
            [1944.96, 0.010078, 1533.54],
            [1955.09, 0.010142, 1538.145],
            [1965.22, 0.010208, 1542.728],
            [1975.35, 0.010273, 1547.289],
            [1985.48, 0.010339, 1551.83],
            [1995.61, 0.010405, 1556.349],
            [2005.74, 0.010471, 1560.847],
            [2015.87, 0.010537, 1565.324],
            [2026.0, 0.010604, 1569.781]
        ])
    
    pd.testing.assert_frame_equal(
        binned_notch_approximation_law._lut_secondary_branch, expected_matrix_AST, rtol=2e-3, atol=1e-5)

@pytest.mark.skip(reason="Derivatives not implemented at the moment, left in the code because it might be useful in the future for performance optimization with gradient-based root finding algorithms.")
@pytest.mark.parametrize('stress, load', [
    (4, 9),
    (10, 15),
    (22, 42),
])
def test_derivatives(stress, load):
    """ Test the analytically derived derivatives of stress and strain formulas """
    
    E = 206e3    # [MPa] Young's modulus
    K = 1184     # [MPa]
    n = 0.187    # [-]
    K_p = 3.5    # [-] (de: Traglastformzahl) K_p = F_plastic / F_yield (3.1.1)
    
    
    # initialize notch approximation law and damage parameter
    notch_approximation_law = SeegerBeste(E, K, n, K_p)
    
    load = float(load)
    stress = float(stress)
    h = 1e-5
    
    # test derivative of stress
    numeric_derivative = (notch_approximation_law._stress_implicit(stress+h, load) - notch_approximation_law._stress_implicit(stress-h, load)) / (2*h)
    derivative = notch_approximation_law._d_stress_implicit(stress, load)
    
    assert np.isclose(numeric_derivative, derivative.values[0])
    
    # test derivative of secondary_stress
    numeric_derivative = (notch_approximation_law._stress_secondary_implicit(stress+h, load) - notch_approximation_law._stress_secondary_implicit(stress-h, load)) / (2*h)
    derivative = notch_approximation_law._d_stress_secondary_implicit(stress, load)
    
    assert np.isclose(numeric_derivative, derivative.values[0])
    
    